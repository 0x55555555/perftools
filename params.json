{"name":"Perftools","tagline":"System for testing performance of applications","body":"perfstack\r\n=========\r\n\r\nSystem for testing performance of applications\r\n\r\nPerformance Gathering\r\n---------------------\r\n\r\nperfstack has several bindings to gather performance results. All bindings produce a common file format,\r\nand can be mixed together in profiling sessions.\r\n\r\n### C++ Bindings\r\nThe top level bindings are written in C++, all other bindings use C++ internally.\r\n\r\nThe below code tests the performance of a piece of code called \"block\":\r\n\r\n```cpp\r\nperf::config cfg;\r\nperf::context ctx(cfg, \"my context\");\r\n\r\nperf::meta_event blk(ctx, \"block\");\r\n\r\n{\r\n  auto f = ctx.fire_child(blk);\r\n\r\n  /// performamce critical work\r\n}\r\n\r\nperf::json_writer json;\r\njson.write(ctx, \"cpp.json\");\r\n```\r\n\r\nperfstack also contains utilities to benchmark code by running it repeatedly:\r\n\r\n```cpp\r\nperf::config cfg;\r\nperf::context ctx(cfg, \"my context\");\r\n\r\nperf::benchmark(ctx, \"string_appending\", []()\r\n{\r\n  std::string a(\"test\");\r\n  a += \"pork\";\r\n});\r\n```\r\n\r\n### C Bindings\r\n\r\nperfstack wraps the C++ bindings in C to allow other languages to utilise it.\r\n\r\n```c\r\nauto config = perf_init_default_config(\"c\");\r\nauto context = perf_init_context(config, \"c_test\");\r\n\r\nauto meta = perf_init_meta_event(context, \"test\");\r\n\r\n{\r\n  auto event = perf_init_event(meta);\r\n  /// perfornamce critical work\r\n\r\n  perf_term_event(event);\r\n}\r\n\r\nperf_write_context(context, \"c.json\");\r\n\r\nperf_term_meta_event(meta);\r\nperf_term_context(context);\r\nperf_term_config(config);\r\n```\r\n\r\n### Python 3 Bindings\r\n\r\nPython 3 can be used to generate performance data.\r\n\r\n```python\r\nimport perf\r\n\r\ncfg = perf.Config()\r\nctx = perf.Context(cfg, \"test\")\r\n\r\nev1 = perf.MetaEvent(ctx, \"pork1\")\r\nev2 = perf.MetaEvent(ctx, \"pork2\")\r\n\r\n\r\nwith perf.Event(ev1):\r\n    # perormance critical work\r\n\r\n    with perf.Event(ev2):\r\n        # inner perormance critical work\r\n\r\nctx.write(\"python.json\")\r\n```\r\n\r\n### Ruby Bindings\r\n\r\nRuby can also generate performance data\r\n\r\n```ruby\r\ncfg = Perf::Config.new()\r\nctx = Perf::Context.new(cfg, \"timing_test\")\r\n\r\nctx.block(\"test_block\") do\r\n  # Timed block\r\nend\r\n\r\nctx.write(\"ruby.json\")\r\n```\r\n","google":"UA-66387169-1","note":"Don't delete this file! It's used internally to help with page regeneration."}